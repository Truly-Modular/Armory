plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
}

repositories {
    maven { url = 'https://maven.parchmentmc.org' }
    maven { url "https://maven.neoforged.net/releases/" }
}

architectury {
    minecraft = rootProject.minecraft_version
}

tasks.register('clean-builds') {
    dependsOn(':armory-forge:clean', ':armory-fabric:clean')
    doLast {
        println "Cleaned previous build"
    }
}

tasks.register('buildBoth') {
    dependsOn('clean-builds', ':armory-fabric:build', ':armory-forge:build')
    doLast {
        def modVersion = rootProject.mod_version
        def minecraftVersion = rootProject.minecraft_version
        def fabricBuildDir = project(':armory-fabric').file('build/libs')
        def forgeBuildDir = project(':armory-forge').file('build/libs')
        def fabricJar = fabricBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        def forgeJar = forgeBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }

        if (fabricJar) {
            copy {
                from fabricJar
                into project.file('Merged')
                rename { fileName ->
                    "Truly-Modular-Armory-${modVersion}-${minecraftVersion}-snapshot-fabric.jar"
                }
            }
        }

        if (forgeJar) {
            copy {
                from forgeJar
                into project.file('Merged')
                rename { fileName ->
                    "Truly-Modular-Armory-${modVersion}-${minecraftVersion}-snapshot-neoforge.jar"
                }
            }
        }

        println "Builds completed"
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.21:2024.06.23@zip")
        }
    }
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    processResources {
        def expandProps = [
                "version"                       : rootProject.mod_version,
                "group"                         : rootProject.project.group, //Else we target the task's group.
                "minecraft_version"             : rootProject.minecraft_version,
                "architectury_version"          : rootProject.architectury_version,
                "neoforge_version"              : rootProject.neoforge_version,
                "neoforge_loader_version_range" : rootProject.neoforge_loader_version_range,
                "neoforge_version_range"        : rootProject.neoforge_version_range,
                "minecraft_version_range"       : rootProject.minecraft_version,
                "fabric_api_version"            : rootProject.fabric_api_version,
                "fabric_loader_version"         : rootProject.fabric_loader_version,
                "mod_name"                      : rootProject.mod_name,
                "mod_author"                    : rootProject.mod_author,
                "mod_id"                        : rootProject.mod_id,
                "mod_description"               : rootProject.mod_description,
                "credits"                       : rootProject.credits,
                "miapi_version"                 : rootProject.miapi_version,
                "github"                        : rootProject.github
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/neoforge.mods.toml', 'META-INF/mods.toml', '*.mixins.json']) {
            expand expandProps
        }
    }

    java {
        withSourcesJar()
    }
}
