plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
}

tasks.register('clean-builds') {
    dependsOn(':armory-forge:clean',':armory-fabric:clean')
    doLast {
        println "Cleaned previous build"
    }
}

tasks.register('buildBoth') {
    dependsOn('clean-builds', ':armory-fabric:build', ':armory-forge:build')
    doLast {
        def modVersion = rootProject.mod_version
        def minecraftVersion = rootProject.minecraft_version
        def fabricBuildDir = project(':armory-fabric').file('build/libs')
        def forgeBuildDir = project(':armory-forge').file('build/libs')
        def fabricJar = fabricBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        def forgeJar = forgeBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }

        if (fabricJar) {
            copy {
                from fabricJar
                into project.file('Merged')
                rename { fileName ->
                    "Truly-Modular-Armory-${modVersion}-${minecraftVersion}-snapshot-fabric.jar"
                }
            }
        }

        if (forgeJar) {
            copy {
                from forgeJar
                into project.file('Merged')
                rename { fileName ->
                    "Truly-Modular-Armory-${modVersion}-${minecraftVersion}-snapshot-forge.jar"
                }
            }
        }

        println "Builds completed"
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:1.20.1+build.10:v2"
    }
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    processResources {
        def expandProps = [
                "version"                   : rootProject.mod_version,
                "group"                     : rootProject.group, //Else we target the task's group.
                "minecraft_version"         : rootProject.minecraft_version,
                "architectury_version"      : rootProject.architectury_version,
                "github"                    : rootProject.github,
                "miapi_version"             : rootProject.miapi_version,
                "forge_version"             : rootProject.forge_version,
                "forge_loader_version_range": rootProject.forge_loader_version_range,
                "forge_version_range"       : rootProject.forge_version_range,
                "minecraft_version_range"   : rootProject.minecraft_version,
                "fabric_api_version"        : rootProject.fabric_api_version,
                "fabric_loader_version"     : rootProject.fabric_loader_version,
                "mod_name"                  : rootProject.mod_name,
                "mod_author"                : rootProject.mod_author,
                "mod_id"                    : rootProject.mod_id,
                "mod_description"           : rootProject.mod_description,
                "credits"                   : rootProject.credits
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
            expand expandProps
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
